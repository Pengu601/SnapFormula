10/15/24

Started SnapFormula Project. Idea is to be able to take a screenshot of an equation, and with that screenshot, be able to convert it into text that
can then be pasted into any application, website, or document as needed, with no hassle.

As of today, I have successfully got the screenshot portion working, successfully being able to select a certain area of my screen and storing the 
selected area in the clipboard (could potentially store as a file, depending on how path I decide to go for the project)

Spent a while brainstorming ideas with the program and what I want it to do, and what can be possible and the extent I can scale it to.

Found out that if you have two Tk instances, it will create two windows. Can fix this by passing through a singular root into the seperate py files.

Got a basic GUI app with a ttk theme installed and working. Will be testing around with it for a while, finding the ins-and-outs of Tkinter.
    Also decide how I want my app to be setup (for PC users).


10/18/24

Invited a friend of mine to collaborate on the project with. We talked about ideas and decided to start small and scale according to the interest
in the project from consumers.

Decided it would be best to make it a google chrome extension, due to its ease of access and ability to be discovered by new users.

Worked on creatin the manifest, html, and necessary js files needed for the google chrome extension, then work on replicating the screenshot feature using
javascript.

Spent the whole night trying to figure out how to get the screenshot feature working with the google chrome extension, and keep getting errors
involving functions, permissions, and google tab API

10/19/24

Finally figured out how to get the screenshot to work. The issue revolved arround the fact that the google tab API calls can only work in the 
background.js or popup.js files, but the img function would only work in the content (snipping_function) js file, so we had to make it so the 
content file would communicate with the background file to get the tab capture, then have it send the response with the dataUrl back to the
content file to then use the dataUrl to get the img with the selected area as defined by user.

Made it so user can use a shortcut to automatically start the screenshot process, instead of clicking the extensionn and manually clicking the button.

Fixed the overlay already defined error when trying to use the screenshot feature more than once. THe issue involved the fact the overlay was defined 
using "let", which meant that it would cause issues as the overlay would be in the same scope, causing it trying to re-define something that already exists.
Solved it by changing "let" to "var", along with the starting x and y variables and selectionBox.

12/7/24

Been busy with midterms, finals, and work. Did some minor testing and adjustments to the extension but no major changes. Currently been working on the AI
model and the datasets to work with. Found a dataset called im2latex that could potentially be what we train our AI on. Will first start with a small 
training set to test how well the dataset is and train on the whole dataset (~100k images) if it works well.    

Finishing the day with setting up datasets with images, pre-processing, and currently working on the architecture for the CNN which is what will be
used as the model for our AI, as it is known to be very good for image-processing.

12/8/24

Got a basic CNN architecture up and running and did some test epochs on the training and validation set. Ran a total of 2 epochs, with the first
epoch giving a train loss of 3.7626 and a validation loss of 6.038. The second epoch gave a train loss of 3.6302 and a validation loss of 8.7573.
As of right now, granted there is a limited epoch amount to actually confirm the situation, it seems the model may be overfitting. It is good to see
that the model imroved its train loss within the next epoch, but the validation loss increased significantly, meaning there might be overfitting
in the model. I will be training with more epochs tomorrow, using the last saved weights, and tweak the architecture and model settings as necessary.
After some more training, I will be testing with some basic images I will create myself to see how the model determines the following latex.